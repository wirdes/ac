#!/usr/bin/env ruby
# frozen_string_literal: true

class Base
  attr_reader :file

  def initialize(file)
    @file = file
  end

  def extract
    raise NotImplementedError
  end
end

class Zip < Base
  def extract
    puts "Zip dosyayı açıyorum: #{file}"

    `unzip #{file}`
  end
end

class Rar < Base
  def extract
    puts "Rar dosyayı açıyorum: #{file}"

    `unrar x #{file}`
  end
end

class Archive
  Error = Class.new StandardError

  attr_reader :unpacker

  def initialize(file)
    support_types = %w[Rar Zip]
    ext = File.extname(file).split('.').last.capitalize
    raise Error, "Desteklenmeyen sıkıştırma biçimi: #{ext}" unless support_types.include?(ext)

    eval("@unpacker = #{ext}.new file")
  end

  def extract
    unpacker.extract
  end
end

def main
  abort "Kullanım: #{$PROGRAM_NAME} DOSYA" unless ARGV.size == 1

  file = ARGV.first
  archive = Archive.new file
  archive.extract
rescue Archive::Error => e
  abort e.message
end

main
